<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端日常记录</title>
    <url>/2021/08/14/record/frontendRecord/</url>
    <content><![CDATA[<h2 id="让移动端滑动更加顺畅"><a href="#让移动端滑动更加顺畅" class="headerlink" title="让移动端滑动更加顺畅"></a>让移动端滑动更加顺畅</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br></pre></td></tr></table></figure>

<h2 id="react项目启动用https的命令"><a href="#react项目启动用https的命令" class="headerlink" title="react项目启动用https的命令"></a>react项目启动用https的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$env</span>:HTTPS = <span class="string">&quot;true&quot;</span>) -and (npm start)</span><br></pre></td></tr></table></figure>

<h2 id="文本溢出-省略号"><a href="#文本溢出-省略号" class="headerlink" title="文本溢出 省略号"></a>文本溢出 省略号</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多行溢出 */</span></span><br><span class="line"><span class="attribute">overflow</span> : hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单行溢出*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>

<!-- [webpck HYPERLINK "https://segmentfault.com/q/1010000009360389"是不是不能编译这个属性 HYPERLINK "https://segmentfault.com/q/1010000009360389"-webkit-box-orient: vertical](https://segmentfault.com/q/1010000009360389)需要加上下面这段 -->
<blockquote>
<p>多行溢出不生效 可能情况webpack原因：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="comment">/* autoprefixer: on */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*! autoprefixer: ignore next */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<p>参考文档<a href="https://segmentfault.com/q/1010000009360389">https://segmentfault.com/q/1010000009360389</a></p>
<h2 id="缩短网址http-dwz-cn"><a href="#缩短网址http-dwz-cn" class="headerlink" title="缩短网址http://dwz.cn"></a>缩短网址<a href="http://dwz.cn/">http://dwz.cn</a></h2><h2 id="IOS-问题"><a href="#IOS-问题" class="headerlink" title="IOS 问题"></a>IOS 问题</h2><blockquote>
<p>Iphone 禁止浏览器弹性滚动<br>Iphone 禁止浏览器弹性滚动  给最外层的盒子上加上 touch-action:none;<br>如果还是不行就给body加个 height：100%;</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault() <span class="comment">// 阻止默认的处理方式(阻止下拉滑动的效果)</span></span><br><span class="line">&#125;, &#123;<span class="attr">passive</span>: <span class="literal">false</span>&#125;) <span class="comment">// passive 参数不能省略，用来兼容ios和android</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ios键盘弹出导致失去焦点问题</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hanldeBlur = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollHeight = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="built_in">Math</span>.max(scrollHeight - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>husky lint-staged</code></p>
<p>这两个包在windows下安装必须用npm 不能用cnpm否则无效</p>
<blockquote>
<p>ios <code>active伪类失效</code> 解决方案</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>YYYY-MM-DD 这种日期格式在转换时 ios上会出问题 建议用 YYYY/MM/DD</p>
</blockquote>
<blockquote>
<p>safari 在低版本对箭头函数的嵌套支持不好 会卡死</p>
</blockquote>
<h2 id="Chrome-浏览器目标填写"><a href="#Chrome-浏览器目标填写" class="headerlink" title="Chrome 浏览器目标填写"></a>Chrome 浏览器目标填写</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- -args --disable-web-security --enable-easy-off-store-extension-install --args --disable-web-security --user-data-dir</span><br><span class="line">- -args --disable-web-security --user-data-dir</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-常用配置"><a href="#Nginx-常用配置" class="headerlink" title="Nginx 常用配置:"></a>Nginx 常用配置:</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span>  <span class="number">80</span><span class="string">;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#   server_name</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">root</span> <span class="string">/data/web/happy-pig;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">error_log</span> <span class="string">/root/nginx_err.log;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="string">try_files</span> <span class="string">$uri</span> <span class="string">@fallback;</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">location</span> <span class="string">/happy_pig/api/</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">X-Forward-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$http_host;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">X-Nginx-Proxy</span> <span class="literal">true</span><span class="string">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#       proxy_redirect   off;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">proxy_pass</span> [<span class="string">http://127.0.0.1:8081</span>]<span class="string">(http://127.0.0.1:8081/);</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">location</span> <span class="string">@fallback</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="string">rewrite</span> <span class="string">.*</span> <span class="string">/index.html</span> <span class="string">break;</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="eventloop"><a href="#eventloop" class="headerlink" title="eventloop"></a>eventloop</h2><blockquote>
<p><a href="https://juejin.im/post/5c9a43175188252d876e5903">参考链接 https://juejin.im/post/5c9a43175188252d876e5903</a></p>
</blockquote>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>linxu常用命令</title>
    <url>/2021/08/14/record/linuxRecord/</url>
    <content><![CDATA[<h2 id="linux-查看内存占用前十的进程"><a href="#linux-查看内存占用前十的进程" class="headerlink" title="linux 查看内存占用前十的进程"></a>linux 查看内存占用前十的进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head</span><br></pre></td></tr></table></figure>

<h2 id="linux-设置PS1"><a href="#linux-设置PS1" class="headerlink" title="linux 设置PS1"></a>linux 设置PS1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS1=<span class="string">&#x27;\[\e]0;\u@\h: \w\a\]$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u:\[\033[01;34m\]\W\[\033[00m\]\$&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2021/08/14/record/gitRecord/</url>
    <content><![CDATA[<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag                             <span class="comment"># 查看tag</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&#x27;some comments&#x27;</span>  <span class="comment"># 创建</span></span><br><span class="line">git push origin --tags              <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure>
<!-- > git branch -a 查看所有分支
> git branch -d 分支名   （删除本地分支） -->

<h2 id="同步远程分支"><a href="#同步远程分支" class="headerlink" title="同步远程分支"></a>同步远程分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote update origin -p</span><br></pre></td></tr></table></figure>

<h2 id="在本地目录下关联远程repository"><a href="#在本地目录下关联远程repository" class="headerlink" title="在本地目录下关联远程repository"></a>在本地目录下关联远程repository</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:git_username/repository_name.git</span><br></pre></td></tr></table></figure>

<h2 id="取消本地目录下关联的远程库"><a href="#取消本地目录下关联的远程库" class="headerlink" title="取消本地目录下关联的远程库"></a>取消本地目录下关联的远程库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

<h2 id="git-LF-CRLF默认设置"><a href="#git-LF-CRLF默认设置" class="headerlink" title="git LF CRLF默认设置"></a>git LF CRLF默认设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="git长期存储密码"><a href="#git长期存储密码" class="headerlink" title="git长期存储密码"></a>git长期存储密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端总结</title>
    <url>/2021/08/14/summary/microFrontEnd/</url>
    <content><![CDATA[<!-- ## aaa
![1.png](/images/microFrontEnd/1.png) -->

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 <a href="https://micro-frontends.org/">Micro Frontends</a> 官网可以了解到，微前端概念是从微服务概念扩展而来的，摒弃大型单体方式，将前端整体分解为小而简单的块，这些块可以独立开发、测试和部署，同时仍然聚合为一个产品出现在客户面前。可以理解微前端是一种将多个可独立交付的小型前端应用聚合为一个整体的架构风格。</p>
<p><strong>值得留意的几个点：</strong></p>
<ul>
<li>微前端不是一门具体的技术，而是整合了技术、策略和方法，可能会以脚手架、辅助插件和规范约束这种生态圈形式展示出来，是一种宏观上的架构。这种架构目前有多种方案，都有利弊之处，但只要适用当前业务场景的就是好方案。</li>
<li>微前端并没有技术栈的约束。每一套微前端方案的设计，都是基于实际需求出发。如果是多团队统一使用了react技术栈，可能对微前端方案的跨技术栈使用并没有要求；如果是多团队同时使用了react和vue技术栈，可能就对微前端的跨技术栈要求比较高。</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li><p><strong>同步更新</strong><br>对比了npm包方式抽离，让我们意识到更新流程和效率的重要性。微前端由于是多个子应用的聚合，如果多个业务应用依赖同一个服务应用的功能模块，只需要更新服务应用，其他业务应用就可以立马更新，从而缩短了更新流程和节约了更新成本。</p>
</li>
<li><p><strong>简单、解耦的代码库</strong><br>每个单独的微前端项目的源代码库会远远小于一个单体前端项目的源代码库。这些小的代码库将会更易于开发。更值得一提的是，我们避免了不相关联的组件之间无意造成的不适当的耦合。通过增强应用程序的边界来减少这种意外耦合的情况的出现。</p>
</li>
<li><p><strong>独立部署</strong><br>与微服务一样，微前端的独立可部署性是关键。它减少了部署的范围，从而降低了相关风险。无论您的前端代码在何处托管，每个微前端都应该有自己的连续交付通道，该通道可以构建、测试并将其一直部署到生产环境中。我们应当能够在不考虑其他代码库或者是通道的情况下来部署每个微服务。</p>
</li>
<li><p><strong>多项目合并为一个单页应用</strong><br>很多微前端解决方案可以通过组织HTML或者组件化让多个项目之间合并到一块，成为一个单页应用，让体验更好。</p>
</li>
</ol>
<h2 id="微前端方案种类"><a href="#微前端方案种类" class="headerlink" title="微前端方案种类"></a>微前端方案种类</h2><p><strong>目前国内微前端方案大概分为：</strong></p>
<ul>
<li><strong>基座模式：</strong> 通过搭建基座、配置中心来管理子应用。如基于SIngle Spa的偏通用的qiankun方案，也有基于本身团队业务量身定制的方案。</li>
<li><strong>自组织模式：</strong> 通过约定进行互调，但会遇到处理第三方依赖等问题。</li>
<li><strong>去中心模式：</strong> 脱离基座模式，每个应用之间都可以彼此分享资源。如基于<strong>Webpack 5 Module Federation</strong>实现的EMP微前端方案、或者<strong>nebula微前端</strong>解决方案，可以实现多个应用彼此共享资源分享。</li>
</ul>
<h2 id="现有微前端解决方案"><a href="#现有微前端解决方案" class="headerlink" title="现有微前端解决方案"></a>现有微前端解决方案</h2><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>  众所周知，iframe是html提供的标签，能加载其他web应用的内容，并且它能兼容所有的浏览器，因此，你可以用它来加载任何你想要加载的web应用。iframe最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。<strong>iframe虽然基本能做到微前端所要做的所有事情，但它的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来开发体验、产品体验的问题。</strong><br>  <strong>不足：</strong></p>
<ul>
<li> 不是单页应用，会导致浏览器刷新 iframe url 状态丢失。</li>
<li> 弹框类的功能无法应用到整个大应用中，只能在对应的窗口内展示。</li>
<li> 由于可能应用间不是在相同的域内，主应用的 cookie 要透传到根域名都不同的子应用中才能实现免登录效果。</li>
<li> 每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程，占用大量资源的同时也在极大地消耗资源。 经过以上思考，我个人也有了一些拓展总结：</li>
<li> iframe的特性导致搜索引擎无法获取到其中的内容，进而无法实现应用的seo</li>
</ul>
<h3 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h3><p>  MDN对Web Components的定义是这样的：</p>
<blockquote>
<p>作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义UI控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。<br>Web Components旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>
</blockquote>
<p>  <strong>它的三项主要技术是指：</strong></p>
<ul>
<li><strong>Custom elements（自定义元素）：</strong>一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</li>
<li><strong>Shadow DOM（影子DOM）：</strong> 一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>
<li><strong>HTML templates（HTML模板）：</strong> <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。 通过以上描述，再结合微前端的概念. </li>
</ul>
<p>  <strong>我们来看看Web Components是如何做到微前端：</strong></p>
<ul>
<li><strong>技术栈无关：</strong> Web Components是浏览器原生组件，那即是在任何框架中都可以使用。</li>
<li><strong>独立开发：</strong> 使用Web Components开发的应用无需与其他应用间产生任何关联。</li>
<li><strong>应用间隔离：</strong> Shadow DOM的特性，各个引入的微应用间可以达到相互隔离的效果。 综上所述，Web Components是有能力以组件加载的方式将微应用整合在一起作为微前端的一种手段，但不幸的是，Web Components是浏览器的新特性，所以它的兼容性不是很好，如果有兼容性要求的项目还是无法使用，具体请查看<a href="https://caniuse.com/?search=WebComponents">can i use</a>。</li>
</ul>
<h3 id="MicroApp（京东开源）"><a href="#MicroApp（京东开源）" class="headerlink" title="MicroApp（京东开源）"></a><a href="https://zeroing.jd.com/micro-app/docs.html#/zh-cn/start">MicroApp（京东开源）</a></h3><p>  <strong>类WebComponent：</strong> 就是使用CustomElement结合自定义的ShadowDom实现WebComponent基本一致的功能。<br>  由于ShadowDom存在的问题，采用自定义的样式隔离和元素隔离实现ShadowDom类似的功能，然后将微前端应用封装在一个CustomElement中，从而模拟实现了一个类WebComponent组件，它的使用方式和兼容性与WebComponent一致，同时也避开了ShadowDom的问题。并且由于自定义ShadowDom的隔离特性，Micro App不需要像single-spa和qiankun一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改webpack配置。<br>  通过上述方案封装了一个自定义标签micro-app，它的渲染机制和功能与WebComponent类似，开发者可以像使用web组件一样接入微前端。它可以兼容任何框架，在使用方式和数据通信上也更加组件化，这显著降低了基座应用的接入成本，并且由于元素隔离的属性，子应用的改动量也大大降低。<br>  <strong>这是该框架现有的功能对比图（仅供参考）</strong><br>  <img data-src="/images/microFrontEnd/1.png"></p>
<p>  <strong>不足：</strong></p>
<ul>
<li>多个项目之间不能共用相同的依赖</li>
<li>应用级别的引用，不够灵活</li>
<li>不够成熟</li>
</ul>
<h3 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h3><p>在微前端界，qiankun算得上是最早成型且知名度最广的框架了，它是真正意义上的单页微前端框架，那么qiankun到底有哪些特点呢，在其<a href="https://qiankun.umijs.org/zh/guide">官网</a>中我找到了如下概括：</p>
<ul>
<li>基于single-spa封装，提供了更加开箱即用的 API</li>
<li>技术栈无关，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架</li>
<li>HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单</li>
<li>样式隔离，确保微应用之间样式互相不干扰</li>
<li>JS 沙箱，确保微应用之间 全局变量/事件 不冲突</li>
<li>资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度</li>
<li>umi 插件，提供了 @umijs/plugin-qiankun 供 umi 应用一键切换成微前端架构系统 除了最后一点拓展以外，微前端想要达到的效果都已经达到。</li>
</ul>
<p><strong>不足：</strong></p>
<ul>
<li>多个项目之间不能共用相同的依赖</li>
<li>应用级别的引用，不够灵活</li>
</ul>
<h3 id="EMP"><a href="#EMP" class="headerlink" title="EMP"></a>EMP</h3><p><a href="https://github.com/efoxTeam/emp">EMP</a>是由欢聚时代业务中台自主研发的最年轻的单页微前端解决方案<br><strong>功能：</strong></p>
<ul>
<li>基于Webpack5的新特性<strong>Module Federation</strong>实现，达到第三方依赖共享，减少不必要的代码引入的目的。</li>
<li><strong>每个微应用独立部署运行</strong>，并通过cdn的方式引入主程序中，因此只需要部署一次，便可以提供给任何基于Module Federation的应用使用。并且此部分代码是远程引入，无需参与应用的打包。</li>
<li><strong>动态更新微应用</strong>：EMP是通过cdn加载微应用，因此每个微应用中的代码有变动时，无需重新打包发布新的整合应用便能加载到最新的微应用。</li>
<li><strong>去中心化</strong>，每个微应用间都可以引入其他的微应用，无中心应用的概念。</li>
<li><strong>跨技术栈组件式调用</strong>，提供了在主应用框架中可以调用其他框架组件的能力（目前已支持互相调用的框架及使用方式请参阅官方文档）。</li>
<li><strong>按需加载</strong>，开发者可以选择只加载微应用中需要的部分，而不是强制只能将整个应用全部加载（<strong>这是与上面几种微前端解决方案中最大的不同</strong>）。</li>
<li><strong>应用间通信</strong>，每一个应用都可以进行状态共享，就像在使用npm模块进行开发一样便捷。</li>
<li><strong>生成对应技术栈模板</strong>，它能像create-react-app一样，也能像create-vue-app一样，通过指令一键搭建好开发环境，减少开发者的负担。</li>
<li><strong>远程拉取ts声明文件</strong>，emp-cli中内置了拉取远程应用中代码声明文件的能力，让使用ts开发的开发者不再为代码报错而烦恼。</li>
</ul>
<p><strong>不足：</strong></p>
<ul>
<li>是一套全新的脚手架，对现有项目改动较大，老项目迁移都必须用这个框架重构。</li>
<li>没有实现js隔离</li>
<li>使用时会有框架的限制。不过目前已经支持了主流框架。</li>
</ul>
<h3 id="nebula"><a href="#nebula" class="headerlink" title="nebula"></a>nebula</h3><p><a href="https://code.haiziwang.com/b/nebula/cli">nebula</a>是由孩子王自主研发的微前端解决方案。<br><strong>功能：</strong></p>
<ul>
<li>基于Webpack5的新特性<strong>Module Federation</strong>实现，达到第三方依赖共享，减少不必要的代码引入的目的。</li>
<li><strong>每个微应用独立部署运行</strong>，并通过cdn的方式引入主程序中，因此只需要部署一次，便可以提供给任何基于Module Federation的应用使用。并且此部分代码是远程引入，无需参与应用的打包。</li>
<li><strong>动态更新微应用</strong>：EMP是通过cdn加载微应用，因此每个微应用中的代码有变动时，无需重新打包发布新的整合应用便能加载到最新的微应用。</li>
<li><strong>去中心化</strong>，每个微应用间都可以引入其他的微应用，无中心应用的概念。</li>
<li><strong>跨技术栈组件式调用</strong>，提供了在主应用框架中可以调用其他框架组件的能力（目前已支持互相调用的框架及使用方式请参阅官方文档）。</li>
<li><strong>按需加载</strong>，开发者可以选择只加载微应用中需要的部分，而不是强制只能将整个应用全部加载。</li>
<li><strong>远程拉取ts声明文件</strong>，emp-cli中内置了拉取远程应用中代码声明文件的能力，让使用ts开发的开发者不再为代码报错而烦恼。</li>
</ul>
<p><strong>与EMP的差异：</strong></p>
<ul>
<li>由于公司使用的react脚手架是基于create-react-app的，所以迁移EMP成本较大，但是create-react-app并没有升级到WP5(Webpack5),用不了MF(Module Federation)功能，所以自己将create-react-app 现有版本的基础上升级到WP5(参考create-react-app WP5社区版升级)，后面CRA官方升级WP5之后，可以无缝切换回官方版本</li>
<li>暂时没有实现应用间通信，后面使用场景增加之后，可以添加。</li>
</ul>
<h2 id="nebula使用"><a href="#nebula使用" class="headerlink" title="nebula使用"></a>nebula使用</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @nebula/cli -g --registry=https://npmneibu.haiziwang.com/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>初始化项目</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nebula init</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/microFrontEnd/2.jpg"></p>
<ol start="3">
<li>其他命令</li>
</ol>
<ul>
<li>查看所有命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nebula -h</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/microFrontEnd/3.jpg"></p>
<ul>
<li>创建项目ts文件(其中fileName可以改变d.ts中 declare后面的前缀 默认取package.json中的name， 既package name与MF中的fileName不相等时使用)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nebula tsc -n|--createName, -p|--createPath -f|--fileName  </span><br></pre></td></tr></table></figure>
<ul>
<li>ts类型根据 nebula.config.js 同步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nebula tsf </span><br></pre></td></tr></table></figure>
<ul>
<li>ts类型远程同步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nebula tss &lt;remoteUrl&gt; -n|--saveName, -p|--savePath </span><br></pre></td></tr></table></figure>

<p><strong>依赖架构</strong></p>
<p><img data-src="/images/microFrontEnd/4.jpg"></p>
<h3 id="nebula的公共基座"><a href="#nebula的公共基座" class="headerlink" title="nebula的公共基座"></a>nebula的公共基座</h3><p><a href="https://code.haiziwang.com/b/nebula/base">项目base</a> 可以点击查看</p>
<blockquote>
<p>基座需要在package.json配置 build:tsc 命令 用于创建ts声明文件 <strong>MF的语法解释放在后面</strong></p>
</blockquote>
<p><img data-src="/images/microFrontEnd/5.jpg"></p>
<blockquote>
<p>然后在craco.config.js当中将要导出 供其他应用使用的公共 变量、方法或者组件在plugins中配置</p>
</blockquote>
<p><img data-src="/images/microFrontEnd/6.jpg"></p>
<h3 id="nebula的子项目"><a href="#nebula的子项目" class="headerlink" title="nebula的子项目"></a>nebula的子项目</h3><p>真实线上使用项目 1.<a href="https://code.haiziwang.com/b/sales-adviser-b-m">聚客宝雇主端H5</a>  2.<a href="https://code.haiziwang.com/tools-web/business-h5">H5商业化</a></p>
<p>用nebula 初始化过之后需要添加几个配置即可正常使用</p>
<ol>
<li>在package.json中添加一个script</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;prestart&quot;</span>: <span class="string">&quot;nebula tsf&quot;</span>,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在根目录新建nebula.config.js文件 文件中添加</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">dts</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">saveName</span>: <span class="string">&#x27;nebulatBase.d.ts&#x27;</span>, <span class="comment">// 保存的文件名称</span></span><br><span class="line">      <span class="attr">savePath</span>: <span class="string">&#x27;src/types&#x27;</span>,    <span class="comment">// 保存文件的位置</span></span><br><span class="line">      <span class="attr">remoteUrl</span>: <span class="string">&#x27;https://fedcineibu.haiziwang.com/dts/nebula/nebulaBase.d.ts&#x27;</span>, <span class="comment">// 远程ts地址</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在craco.config.js中的plugins 添加MF配置即可</li>
</ol>
<p><img data-src="/images/microFrontEnd/7.jpg"></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
</search>
